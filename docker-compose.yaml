services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: chatbot4j-postgres
    environment:
      POSTGRES_DB: chatbot4j
      POSTGRES_USER: chatbot
      POSTGRES_PASSWORD: chatbot
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chatbot -d chatbot4j"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # ChatBot4j Application
  chatbot4j:
    build: .
    container_name: chatbot4j-app
    environment:
      # Database Configuration
      DB_URL: jdbc:postgresql://postgres:5432/chatbot4j
      DB_USERNAME: chatbot
      DB_PASSWORD: chatbot
      
      # LLM Configuration (Required - Set your own values)
      LLM_BASE_URL: ${LLM_BASE_URL:-https://api.openai.com/v1/}
      LLM_MODEL: ${LLM_MODEL:-gpt-4o-mini}
      LLM_API_KEY: ${LLM_API_KEY:-demo}
      
      # Embedding Configuration (Optional)
      EMBEDDING_BASE_URL: ${EMBEDDING_BASE_URL:-https://api.openai.com}
      
      # Web Search Configuration (Optional)
      TAVILY_API_KEY: ${TAVILY_API_KEY:-demo}
      
      # Spring Profile
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-prod}
      
      # JVM Configuration
      JAVA_OPTS: ${JAVA_OPTS:--Xmx512m -Xms256m}
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  default:
    name: chatbot4j-network
